{"version":3,"sources":["algorand/contract_binaries.ts","algorand/contractHelpers.ts","algorand/subscription.ts","helpers/utilities.ts","helpers/api.ts","features/walletSlice.ts","features/applicationSlice.ts","components/Wallet/utils.ts","assets/logo.svg","components/SiteHeader/index.tsx","components/LoadingIcon.tsx","components/SiteBody/home.tsx","assets/algorandwallet.svg","assets/myalgo.svg","assets/algosigner.svg","components/Creator/createPlan.tsx","components/Creator/dashboard.tsx","components/Supporter/subscribe.tsx","components/Supporter/dashboard.tsx","App.tsx","reportWebVitals.js","store/index.ts","theme/button.ts","theme/input.ts","theme/table.ts","theme/index.ts","index.tsx","algorand/config.testnet.ts","algorand/config.ts","algorand/wallet.ts"],"names":["contractBinaries","StateKeys","algodClient","StateToObj","sd","obj","idx","key","Buffer","from","toString","v","value","action","type","b","bytes","i","uint","Uint8Array","getAlgodClient","undefined","token","Configuration","algod","server","host","port","algosdk","Algodv2","getSubscriptionPlan","appId","a","client","getApplicationByID","do","app","Subscription","fromState","subscribePlan","amt","address","walletType","connector","subscription","addr","appAddr","appArgs","getTransactionParams","sp","pay_txn","makePaymentTxnWithSuggestedParams","algosToMicroalgos","app_opt_in_txn","makeApplicationOptInTxn","app_txn","makeApplicationNoOpTxn","txns","hasOptedInApp","push","assignGroupID","sign","signed","sendWait","result","Error","accountInformation","ai","some","createSubscriptionPlan","creatorName","planName","planDesc","planPrice","approval","programs","clear","args","decodeAddress","publicKey","encodeUint64","createTxn","Transaction","appIndex","TransactionType","appl","appOnComplete","OnApplicationComplete","NoOpOC","appApprovalProgram","appClearProgram","appGlobalInts","appGlobalByteSlices","appLocalInts","appLocalByteSlices","suggestedParams","setupSubscription","getApplicationAddress","fundAmt","fundTxn","grouped","closeSubscription","accts","makeApplicationDeleteTxn","sendRawTransaction","map","t","blob","txId","waitForConfirmation","timeout","status","startround","currentround","pendingTransactionInformation","pending","length","statusAfterBlock","getUserSubscribedPlans","accountInfoResponse","apps","processedAppsDetails","forEach","processedAppsKVpairs","processObj","id","getAppGlobalState","appInfoResponse","console","log","getUserCreatedPlans","createdApps","userCreatedSubscriptionPlans","appInfo","processedObj","globalState","Object","entries","TextDecoder","decode","creator","creator_name","plan_name","plan_desc","plan_monthly_price","created_on","assign","this","state","s","encodeAddress","creator_key","creator_name_key","plan_name_key","plan_desc_key","plan_monthly_price_key","created_on_key","ellipseAddress","width","slice","formatBigNumWithDecimals","num","decimals","singleUnit","BigInt","repeat","fractionalUnits","padStart","substring","ChainType","mainNetClient","testNetClient","clientForChain","chain","MainNet","TestNet","apiGetAccountAssets","setIntDecoding","IntDecoding","BIGINT","accountInfo","algoBalance","amount","assetsFromRes","assets","frozen","Number","sort","Promise","all","asset","getAssetByID","params","name","unitName","url","unshift","initialState","accounts","connected","fetching","getAccountAssets","createAsyncThunk","accountData","response","walletSlice","createSlice","reducers","setFetching","payload","setWalletType","switchChain","reset","walletInit","WalletConnect","bridge","qrcodeModal","QRCodeModal","MyAlgo","window","AlgoSigner","setConnected","setAccounts","setAccountAssets","killSession","caseReducers","extraReducers","builder","addCase","fulfilled","selectWalletType","wallet","selectFetching","selectChain","selectConnected","selectConnector","selectAssets","selectAddress","actions","applicationSlice","isModalOpen","isNotificationOpen","notificationTitle","notificationContent","setIsModalOpen","setIsNotificationOpen","setNotificationTitle","setNotificationContent","selectIsModalOpen","application","selectIsNotificationOpen","selectNotificationTitle","selectNotificationContent","setAccountsAtConnection","dispatch","SiteHeader","loading","useSelector","nativeCurrency","find","getAlgoAssetData","useDispatch","useEffect","on","error","subscribeToEvents","createSession","connect","then","ledger","className","to","src","logo","alt","Popover","position","Position","BOTTOM_LEFT","content","Menu","Group","Item","BOTTOM_RIGHT","onSelect","IconButton","icon","MenuIcon","marginRight","appearance","Button","onClick","size","LoadingIcon","Home","CreatorHome","useState","setCreatorName","setPlanName","setPlanDesc","price","setPrice","setAppId","navigate","useNavigate","createPlan","_appId","catch","TextInputField","label","description","onChange","event","target","TextareaField","CreatorDashboard","plans","setPlans","onDeleteError","deletePlan","parseInt","Table","Head","TextHeaderCell","VirtualBody","height","plan","Row","TextCell","isNumber","microalgosToAlgos","SubscribeView","months","setMonths","setAmount","actualPayAmount","setActualPayAmount","subscribe","_amount","_actual","SupporterDashboard","index","appDetails","_app","months_subscribed","paid","App","setWalletAndConnect","walletName","localStorage","getItem","element","path","Dialog","isShown","title","hasFooter","onCloseComplete","algowallet","myalgo","algosigner","CornerDialog","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","walletReducer","applicationReducer","preloadedState","middleware","getDefaultMiddleware","serializableCheck","button","baseStyle","defaultTheme","components","fontFamily","fontSize","padding","borderRadius","appearances","primary","color","backgroundColor","_hover","minimal","border","sizes","small","lineHeight","large","input","Input","table","theme","fontFamilies","display","ui","mono","ReactDOM","render","StrictMode","document","getElementById","testnet_config","txnsToSign","txn","encodeUnsignedTransaction","request","formatJsonRpcRequest","sendCustomRequest","txID","signTransaction","signTxn"],"mappings":"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","file":"static/js/main.32806978.chunk.js","sourcesContent":["const contractBinaries = {\n    \"approval\": \"BSADAQAEJgMScGxhbl9tb250aGx5X3ByaWNlB2NyZWF0b3IPbnVtX3N1YnNjcmliZXJzMRgjEkAA7zEZIxJAADYxGSISQAAtMRmBBRJAABAxGYECEjEZJBIRQAABACNDMQApZBIxADIJEhFEKWSIARIiQyNDIkM2GgCABXNldHVwEkAAmTYaAIAJc3Vic2NyaWJlEkAAAQAxFiIJOBAiEjEWIgk4ADEAEhAxFiIJOAcyChIQMRYiCTgIMgAPEDEWIgk4CChkCiIPEEQqKmQiCGcjgARwYWlkMRYiCTgIZiOAEW1vbnRoc19zdWJzY3JpYmVkMRYiCTgIKGQKZiOAF3N1YnNjcmlwdGlvbl9zdGFydF9kYXRlMgdmIkMjQ7EkshAyCrIUsyJDKTYaAGeADGNyZWF0b3JfbmFtZTYaAWeACXBsYW5fbmFtZTYaAmeACXBsYW5fZGVzYzYaA2coNhoEF2eACmNyZWF0ZWRfb26ACVN1YnNjcnlwdGcoIxalRCJDNQAyCmAjE0EACbEishA0ALIJs4k=\",\n    \"clear\": \"BYEBQw==\"\n}\n\nexport default contractBinaries;","import Configuration from \"./config\"\nimport algosdk, { \n    Transaction, \n    TransactionType,\n    decodeAddress,\n    encodeUint64,\n    OnApplicationComplete,\n} from 'algosdk'\nimport { SignedTxn, sign } from \"./wallet\";\nimport { Subscription } from \"./subscription\";\nimport programs from \"./contract_binaries\";\n\n\n// The keys to the global state parameters to the application\nexport enum StateKeys  {\n    creator_key            = \"creator\",\n    creator_name_key       = \"creator_name\",\n    plan_name_key          = \"plan_name\",\n    plan_desc_key          = \"plan_desc\",\n    plan_monthly_price_key = \"plan_monthly_price\",\n    created_on_key         = \"created_on\",\n}\n\n// Represents the global-state and global-state-delta we get back from\n// AlgodClient requests, state-deltas will contain an action, state will \n// contain the type. In both cases 1 is for bytes, 2 is for ints. We use\n// This to convert the array to a more friendly object \nexport interface State  {\n    key: string\n    value: {\n        bytes: string\n        uint: number\n        type?: number\n        action?: number\n    }\n}\n\n// Generic object to hold state keys/values\ninterface Obj {\n   [key: string] : {\n       b: Uint8Array\n       i: number\n   }\n}\n\n// Converts an array of global-state or global-state-deltas to a more\n// friendly generic object\nexport function StateToObj(sd: State[]): Obj {\n    const obj = {} as Obj\n\n    for(const idx in sd){\n        const key = Buffer.from(sd[idx].key, 'base64').toString()\n\n        // https://github.com/algorand/go-algorand/blob/master/data/basics/teal.go\n        // In both global-state and state deltas, 1 is bytes and 2 is int\n        const v = sd[idx].value\n        const dataTypeFlag = v.action?v.action:v.type\n        switch(dataTypeFlag){\n            case 1:\n                obj[key] = {b:Buffer.from(v.bytes, 'base64'), i:0}\n                break;\n            case 2:\n                obj[key] = {i:v.uint, b:new Uint8Array()}\n                break;\n            default: // ??\n        }\n    }\n\n    return obj\n}\n\n\n// Lazy init algod client\nlet algodClient: algosdk.Algodv2;\nexport function getAlgodClient(): algosdk.Algodv2 {\n    if (algodClient !== undefined) return algodClient\n\n    const token = Configuration.algod.token\n    const server= Configuration.algod.host \n    const port  = Configuration.algod.port\n\n    algodClient = new algosdk.Algodv2(token, server, port)\n\n    return algodClient\n}\n\n// Lazy init indexer client\nlet indexerClient: algosdk.Indexer;\nfunction getIndexerClient(): algosdk.Indexer {\n    if (indexerClient !== undefined) return indexerClient\n\n    const token = Configuration.indexer.token\n    const server= Configuration.indexer.host \n    const port  = Configuration.indexer.port\n\n    indexerClient = new algosdk.Indexer(token, server, port)\n\n    return indexerClient\n}\n\n// Get the application by id and construct a Subscription obj using the global-state\nexport async function getSubscriptionPlan(appId: number): Promise<Subscription> {\n    const client = getAlgodClient()\n    const app = await client.getApplicationByID(appId).do()\n    return Subscription.fromState(appId, app['params']['global-state'])\n}\n\n// Use the indexer to get some transactions up to limit\n// Optionally return the next page for seeing more if the user wants to\nexport async function getSubscribeTransactions(\n    appId: number, limit: number, start: number, nextPage: string): Promise<any> {\n\n    const client = getIndexerClient()\n\n    if(start.toString().length>10)\n        start = start/1000\n\n    const begin = new Date(0)\n    begin.setUTCSeconds(start)\n\n    let req = client.searchForTransactions()\n        .applicationID(appId)\n        .limit(limit)\n        .txType(\"appl\")\n        .afterTime(begin.toISOString())\n\n    // If next page is defined, add it to the request\n    if(nextPage !== undefined && nextPage !== \"\")\n        req = req.nextToken(nextPage)\n\n    // Return the result of the query\n    return await req.do()\n}\n\n// Creates a subscription grouped transaction.\n// The grouped transaction consists of a payment in the amount they're paying\n// and an application call to update the state of the subscription plan contract\nexport async function subscribePlan(appId: number, amt: number, address: string, walletType: string, connector: any): Promise<any> {\n    // Create transaction\n    const client  = getAlgodClient()\n\n    // Get the latest info for the subscription\n    const subscription = await getSubscriptionPlan(appId)\n\n    // Get the supporter's account\n    const addr = address\n    \n    // Prepare txn vars\n    const appAddr       = subscription.addr\n    const appArgs: Uint8Array[] = [new Uint8Array(Buffer.from(\"subscribe\"))]\n\n    const sp        = await client.getTransactionParams().do()\n\n    const pay_txn   = algosdk.makePaymentTxnWithSuggestedParams(\n        addr, appAddr, algosdk.algosToMicroalgos(amt), undefined, undefined, sp\n    );\n\n    const app_opt_in_txn = algosdk.makeApplicationOptInTxn(\n      addr, sp, appId\n    );\n\n    const app_txn   = algosdk.makeApplicationNoOpTxn(\n        addr, sp, appId, appArgs\n    );\n\n    const txns = [];\n\n    const userHasOptedInApp = await hasOptedInApp(addr, appId);\n\n    if (!userHasOptedInApp) {\n      txns.push(app_opt_in_txn);\n    }\n   \n    txns.push(pay_txn, app_txn);\n\n    algosdk.assignGroupID(txns)\n\n    const signed = await sign(txns, walletType, connector)\n    const result = await sendWait(signed)\n\n    if(result['pool-error']) throw new Error(\"Subscription Failed: \"+result['pool-error'])\n\n    return result;\n}\n\nexport async function hasOptedInApp(addr: string, appId: number) {\n  const client = getAlgodClient()\n  const ai = await client.accountInformation(addr).do()\n\n  // Already opted in\n  return (ai['apps-local-state'].some((a: any)=> a['id'] === appId));\n}\n\n// Creates the subscription withe the parameters passed. \nexport async function createSubscriptionPlan(\n                                            creatorName: string,\n                                            planName: string,\n                                            planDesc: string,\n                                            planPrice: number,\n                                            address: string,\n                                            walletType: string,\n                                            connector: any): Promise<number>{\n\n    const client = getAlgodClient()\n\n    // b64 decode the programs into uint8arrays\n    const approval  = new Uint8Array(Buffer.from(programs.approval, \"base64\"))\n    const clear     = new Uint8Array(Buffer.from(programs.clear, \"base64\"))\n\n    // Prepare app args to initialize the subscription\n    const addr      = address\n    const args      = [\n        decodeAddress(addr).publicKey,\n        new Uint8Array(Buffer.from(creatorName)),\n        new Uint8Array(Buffer.from(planName)),\n        new Uint8Array(Buffer.from(planDesc)),\n        encodeUint64(algosdk.algosToMicroalgos(planPrice)),\n    ]\n\n    const sp = await client.getTransactionParams().do()\n    const createTxn = new Transaction({\n        from:addr,\n        appIndex: 0,\n        type: TransactionType.appl,\n        appOnComplete: OnApplicationComplete.NoOpOC,\n        appApprovalProgram: approval,\n        appClearProgram: clear,\n        appGlobalInts: 2,\n        appGlobalByteSlices: 5,\n        appLocalInts: 3,\n        appLocalByteSlices: 0,\n        appArgs: args,\n        suggestedParams: sp\n    })\n    \n\n    const signed = await sign([createTxn], walletType, connector)\n    const result = await sendWait(signed)\n\n    if(result['pool-error']) throw new Error(\"Create Application failed: \"+result['pool-error'])\n\n    return result['application-index']\n}\n\nexport async function setupSubscription(appId: number, address: string, walletType: string, connector: any) {\n    const client = getAlgodClient()\n\n    const addr      = address\n    const appAddr   = algosdk.getApplicationAddress(appId)\n    const fundAmt   = (\n        100000 + // min account balance\n        1 * 1000 // 1 * min txn fee\n    )\n\n    const sp        = await client.getTransactionParams().do()\n    const fundTxn   = algosdk.makePaymentTxnWithSuggestedParams(\n        addr, appAddr, fundAmt, undefined, undefined, sp)\n\n    const grouped = [fundTxn]\n    algosdk.assignGroupID(grouped)\n\n    const signed = await sign(grouped, walletType, connector)\n\n    const result = await sendWait(signed)\n    \n    if(result['pool-error']) throw new Error(\"Failed to setup subscription: \"+result['pool-error'])\n\n    return result;\n\n}\n\n// Close out the subscription by deleting the application\nexport async function closeSubscription(appId: number, address: string, walletType: string, connector: any) {\n    const client = getAlgodClient()\n\n    const addr      = address\n    const accts     = [addr]\n\n    const sp        = await client.getTransactionParams().do()\n\n    const fundTxn   = algosdk.makeApplicationDeleteTxn(addr, sp, appId, undefined, accts)\n    const [signed]  = await sign([fundTxn], walletType, connector)\n\n    const result = await sendWait([signed])\n\n    if(result['pool-error']) throw new Error(\"Failed to close subscription: \"+result['pool-error'])\n\n    return result;\n}\n\n// Utility function to block after sending the raw transaction for 3 rounds in this case\nexport async function sendWait(signed: SignedTxn[]): Promise<any> {\n    const client = getAlgodClient()\n    const {txId} = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n    const result = await waitForConfirmation(txId, 3)\n    return result \n}\n\n// Continuously poll the pending txn endpoint with the txn id to see if its been confirmed\n// At the time of reading, this may have been included in the js-sdk and that one should\n// be used instead of this one\nasync function waitForConfirmation(txId: string, timeout: number): Promise<any> {\n    const client = getAlgodClient()\n\n    if (client == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await client.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await client\n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await client.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n\n// read local state of application from user account\nexport async function readLocalState(address: string, appId: number){\n    const client = getAlgodClient()\n    let accountInfoResponse = await client.accountInformation(address).do();\n    for (let i = 0; i < accountInfoResponse['apps-local-state'].length; i++) { \n        if (accountInfoResponse['apps-local-state'][i].id === appId) {\n            console.log(\"User's local state:\");\n            for (let n = 0; n < accountInfoResponse['apps-local-state'][i][`key-value`].length; n++) {\n                console.log(accountInfoResponse['apps-local-state'][i][`key-value`][n]);\n            }\n        }\n    }\n}\n\nexport async function getUserSubscribedPlans(address: string) {\n  const client = getAlgodClient()\n  let accountInfoResponse = await client.accountInformation(address).do();\n  const apps = accountInfoResponse['apps-local-state'];\n  const processedAppsDetails: any = [];\n  apps.forEach((app: any) => {\n    const appsKVpairs = StateToObj(app[\"key-value\"]);\n    const processedAppsKVpairs = processObj(appsKVpairs);\n    processedAppsDetails.push({\n      \"id\": app.id,\n      \"local-state\": processedAppsKVpairs\n    })\n  });\n  return processedAppsDetails;\n}\n\n// read global state of application\nexport async function getAppGlobalState(appId: number){\n  const client = getAlgodClient()\n  let appInfoResponse = await client.getApplicationByID(appId).do();\n  console.log(\"appInfoResponse: \",appInfoResponse)\n  return appInfoResponse[\"params\"][\"global-state\"];\n}\n\nexport async function getUserCreatedPlans(address: string){\n  const client = getAlgodClient()\n  let accountInfoResponse = await client.accountInformation(address).do();\n  let createdApps = accountInfoResponse['created-apps'];\n  let userCreatedSubscriptionPlans: any = [];\n  createdApps.forEach((appInfo: any) => {\n    const obj = StateToObj(appInfo[\"params\"][\"global-state\"]);\n    const processedObj: any = processObj(obj);\n    if (processedObj[\"created_on\"] === \"Subscrypt\") {\n      userCreatedSubscriptionPlans.push({\n        appId: appInfo.id,\n        globalState: processedObj\n      })\n    }\n  })\n  console.log(\"userCreatedSubscriptionPlans: \", userCreatedSubscriptionPlans)\n  return userCreatedSubscriptionPlans;\n}\n\nfunction processObj(obj: Obj) {\n  const processedObj: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (key !== \"creator\" && value.i === 0) {\n      processedObj[key] = new TextDecoder().decode(value.b);\n    } else {\n      processedObj[key] = value;\n    }\n  }\n\n  return processedObj;\n}","import algosdk from 'algosdk'\nimport {\n    State, \n    StateKeys,\n    StateToObj,\n} from './contractHelpers'\n\nexport class Subscription {\n    id: number = 0;\n    addr: string = \"\";\n    creator: string = \"\";\n    creator_name: string = \"\";\n    plan_name: string = \"\";\n    plan_desc: string = \"\";\n    plan_monthly_price: number = 0;\n    created_on: string = \"\";\n\n    constructor(args: any = {}) { Object.assign(this, args) }\n    static fromState(id: number, state: State[]): Subscription {\n        const s = StateToObj(state)\n\n        return new Subscription({\n            id       : id,\n            addr     : algosdk.getApplicationAddress(id),\n            creator   : algosdk.encodeAddress(s[StateKeys.creator_key].b),\n            creator_name : new TextDecoder().decode(s[StateKeys.creator_name_key].b),\n            plan_name : new TextDecoder().decode(s[StateKeys.plan_name_key].b),\n            plan_desc : new TextDecoder().decode(s[StateKeys.plan_desc_key].b),\n            plan_monthly_price  : s[StateKeys.plan_monthly_price_key].i,\n            created_on : new TextDecoder().decode(s[StateKeys.created_on_key].b),\n        }) \n    }\n}","export function capitalize(string: string): string {\n    return string\n      .split(\" \")\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n  }\n  \n  export function ellipseText(text = \"\", maxLength = 9999): string {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    const _maxLength = maxLength - 3;\n    let ellipse = false;\n    let currentLength = 0;\n    const result =\n      text\n        .split(\" \")\n        .filter(word => {\n          currentLength += word.length;\n          if (ellipse || currentLength >= _maxLength) {\n            ellipse = true;\n            return false;\n          } else {\n            return true;\n          }\n        })\n        .join(\" \") + \"...\";\n    return result;\n  }\n  \n  export function ellipseAddress(address = \"\", width = 6): string {\n    return `${address.slice(0, width)}...${address.slice(-width)}`;\n  }\n  \n  export function padLeft(n: string, width: number, z?: string): string {\n    z = z || \"0\";\n    n = n + \"\";\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n  }\n  \n  export function sanitizeHex(hex: string): string {\n    hex = hex.substring(0, 2) === \"0x\" ? hex.substring(2) : hex;\n    if (hex === \"\") {\n      return \"\";\n    }\n    hex = hex.length % 2 !== 0 ? \"0\" + hex : hex;\n    return \"0x\" + hex;\n  }\n  \n  export function removeHexPrefix(hex: string): string {\n    return hex.toLowerCase().replace(\"0x\", \"\");\n  }\n  \n  export function getDataString(func: string, arrVals: any[]): string {\n    let val = \"\";\n    for (let i = 0; i < arrVals.length; i++) {\n      val += padLeft(arrVals[i], 64);\n    }\n    const data = func + val;\n    return data;\n  }\n  \n  export function isMobile(): boolean {\n    let mobile = false;\n  \n    function hasTouchEvent(): boolean {\n      try {\n        document.createEvent(\"TouchEvent\");\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  \n    function hasMobileUserAgent(): boolean {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\n          navigator.userAgent,\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n          navigator.userAgent.substr(0, 4),\n        )\n      ) {\n        return true;\n      } else if (hasTouchEvent()) {\n        return true;\n      }\n      return false;\n    }\n  \n    mobile = hasMobileUserAgent();\n  \n    return mobile;\n  }\n  \n  export function formatBigNumWithDecimals(num: bigint, decimals: number): string {\n    const singleUnit = BigInt(\"1\" + \"0\".repeat(decimals));\n    const wholeUnits = num / singleUnit;\n    const fractionalUnits = num % singleUnit;\n  \n    return wholeUnits.toString() + \".\" + fractionalUnits.toString().padStart(decimals, \"0\").substring(0,2);\n  }\n  ","import algosdk from \"algosdk\";\nimport { IAssetData } from \"./types\";\n\nexport enum ChainType {\n  MainNet = \"MainNet\",\n  TestNet = \"TestNet\",\n}\n\nconst mainNetClient = new algosdk.Algodv2(\"\", \"https://algoexplorerapi.io\", \"\");\nconst testNetClient = new algosdk.Algodv2(\"\", \"https://testnet.algoexplorerapi.io\", \"\");\n\nfunction clientForChain(chain: ChainType): algosdk.Algodv2 {\n  switch (chain) {\n    case ChainType.MainNet:\n      return mainNetClient;\n    case ChainType.TestNet:\n      return testNetClient;\n    default:\n      throw new Error(`Unknown chain type: ${chain}`);\n  }\n}\n\nexport async function apiGetAccountAssets(\n  chain: ChainType,\n  address: string,\n): Promise<IAssetData[]> {\n  const client = clientForChain(chain);\n\n  const accountInfo = await client\n    .accountInformation(address)\n    .setIntDecoding(algosdk.IntDecoding.BIGINT)\n    .do();\n\n  const algoBalance = accountInfo.amount as bigint;\n  const assetsFromRes: Array<{\n    \"asset-id\": bigint;\n    amount: bigint;\n    creator: string;\n    frozen: boolean;\n  }> = accountInfo.assets;\n\n  const assets: IAssetData[] = assetsFromRes.map(({ \"asset-id\": id, amount, creator, frozen }) => ({\n    id: Number(id),\n    amount,\n    creator,\n    frozen,\n    decimals: 0,\n  }));\n\n  assets.sort((a, b) => a.id - b.id);\n\n  await Promise.all(\n    assets.map(async asset => {\n      const { params } = await client.getAssetByID(asset.id).do();\n      asset.name = params.name;\n      asset.unitName = params[\"unit-name\"];\n      asset.url = params.url;\n      asset.decimals = params.decimals;\n    }),\n  );\n\n  assets.unshift({\n    id: 0,\n    amount: algoBalance,\n    creator: \"\",\n    frozen: false,\n    decimals: 6,\n    name: \"Algo\",\n    unitName: \"Algo\",\n  });\n\n  return assets;\n}\n\nexport async function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\n  const params = await clientForChain(chain)\n    .getTransactionParams()\n    .do();\n  return params;\n}\n\nexport async function apiSubmitTransactions(\n  chain: ChainType,\n  stxns: Uint8Array[],\n): Promise<number> {\n  const { txId } = await clientForChain(chain)\n    .sendRawTransaction(stxns)\n    .do();\n  return await waitForTransaction(chain, txId);\n}\n\nasync function waitForTransaction(chain: ChainType, txId: string): Promise<number> {\n  const client = clientForChain(chain);\n\n  let lastStatus = await client.status().do();\n  let lastRound = lastStatus[\"last-round\"];\n  while (true) {\n    const status = await client.pendingTransactionInformation(txId).do();\n    if (status[\"pool-error\"]) {\n      throw new Error(`Transaction Pool Error: ${status[\"pool-error\"]}`);\n    }\n    if (status[\"confirmed-round\"]) {\n      return status[\"confirmed-round\"];\n    }\n    lastStatus = await client.statusAfterBlock(lastRound + 1).do();\n    lastRound = lastStatus[\"last-round\"];\n  }\n}\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport MyAlgo from \"@randlabs/myalgo-connect\";\nimport { apiGetAccountAssets, ChainType } from \"../helpers/api\";\nimport { IAssetData } from \"../helpers/types\";\n\ninterface WalletState {\n  chain: ChainType,\n  walletType: string,\n  accounts: string[],\n  address: string,\n  assets: IAssetData[],\n  connected: boolean,\n  connector: any,\n  fetching: boolean,\n}\n\nconst initialState = {\n  chain: ChainType.TestNet,\n  walletType: \"\",\n  accounts: [],\n  address: \"\",\n  assets: [],\n  connected: false,\n  connector: null,\n  fetching: false,\n} as WalletState;\n\nconst getWalletConnect = () => new WalletConnect({\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcodeModal: QRCodeModal,\n});\n\nconst getMyAlgo = () => new MyAlgo();\n\nconst getAlgoSigner = () => (window as any).AlgoSigner;\n\nexport const getAccountAssets = createAsyncThunk(\"walletConnect/getAccountAssets\", async (accountData: {chain: ChainType, address: string}) => {\n  const { chain, address } = accountData;\n  const response = apiGetAccountAssets(chain, address)\n  return response;\n})\n\nexport const walletSlice = createSlice({\n    name: 'wallet',\n    initialState,\n    reducers: {\n      setFetching(state, action) {\n        console.log(\"setFetching: \", action.payload)\n        state.fetching = action.payload;\n      },\n      setWalletType(state, action) {\n        state.walletType = action.payload;\n      },\n      switchChain(state, action) {\n        console.log(\"switchChain chain: \", action.payload)\n        state.chain = action.payload;\n      },\n      reset: state => {\n        state.accounts = [];\n        state.address = \"\";\n        state.assets = [];\n        state.connected = false;\n        state.connector = null;\n        state.walletType = \"\";\n        console.log(\"reset state\", state)\n      },\n      walletInit: state => {\n        // Create a connector\n        if (state.walletType === \"walletConnect\") {\n          state.connector = getWalletConnect();\n        } else if (state.walletType === \"myAlgo\") {\n          state.connector = getMyAlgo();\n        } else if (state.walletType === \"algoSigner\") {\n          state.connector = getAlgoSigner();\n        }\n      },\n      setConnected: (state, action) => {\n        state.connected = action.payload;\n      },\n      setAccounts: (state, action) => {\n        state.accounts = action.payload;\n        if (state.walletType === \"walletConnect\") {\n          state.address = action.payload[0];\n        } else if (state.walletType === \"myAlgo\" || state.walletType === \"algoSigner\") {\n          state.address = action.payload[0].address;\n        }\n      },\n      setAccountAssets: (state, action) => {\n        state.assets = action.payload;\n      },\n      killSession: state => {\n        if (state.connected) {\n          if (state.walletType === \"walletConnect\") {\n            (state.connector as WalletConnect).killSession();\n          } else if (state.walletType === \"myAlgo\" || state.walletType === \"algoSigner\") {\n            walletSlice.caseReducers.reset(state);\n          }\n        }\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(getAccountAssets.fulfilled, (state, action) => {\n        state.assets = action.payload;\n      })\n    }\n});\n\nexport const selectWalletType = (state: any) => state.wallet && state.wallet.walletType;\nexport const selectFetching = (state: any) => state.wallet && state.wallet.fetching;\nexport const selectChain = (state: any) => state.wallet && state.wallet.chain;\nexport const selectConnected = (state: any) => state.wallet && state.wallet.connected;\nexport const selectConnector = (state: any) => state.wallet && state.wallet.connector;\nexport const selectAssets = (state: any) => state.wallet && state.wallet.assets;\nexport const selectAddress = (state: any) => state.wallet && state.wallet.address;\n\nexport const {\n  setFetching,\n  switchChain,\n  reset,\n  setWalletType,\n  walletInit,\n  setConnected,\n  setAccounts,\n  killSession\n} = walletSlice.actions;\n\nexport default walletSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isModalOpen: false,\n  isNotificationOpen: false,\n  notificationTitle: \"\",\n  notificationContent: \"\",\n};\n\nexport const applicationSlice = createSlice({\n  name: 'application',\n  initialState,\n  reducers: {\n    setIsModalOpen: (state, action) => {\n      state.isModalOpen = action.payload;\n    },\n    setIsNotificationOpen: (state, action) => {\n      state.isNotificationOpen = action.payload;\n    },\n    setNotificationTitle: (state, action) => {\n      state.notificationTitle = action.payload;\n    },\n    setNotificationContent: (state, action) => {\n      state.notificationContent = action.payload;\n    },\n  }\n});\n\nexport const selectIsModalOpen = (state: any) => state.application && state.application.isModalOpen;\nexport const selectIsNotificationOpen = (state: any) => state.application && state.application.isNotificationOpen;\nexport const selectNotificationTitle = (state: any) => state.application && state.application.notificationTitle;\nexport const selectNotificationContent = (state: any) => state.application && state.application.notificationContent;\n\nexport const {\n  setIsModalOpen,\n  setIsNotificationOpen,\n  setNotificationTitle,\n  setNotificationContent\n} = applicationSlice.actions;\n\nexport default applicationSlice.reducer;","import WalletConnect from '@walletconnect/client';\nimport { Dispatch } from 'react';\nimport { reset, setAccounts, setConnected } from '../../features/walletSlice';\nimport { IAssetData } from '../../helpers/types';\n\nexport const subscribeToEvents = (dispatch: Dispatch<any>) => (connector: WalletConnect) => {\n  if (!connector) {\n    return;\n  }\n  // Subscribe to connection events\n  connector.on(\"connect\", (error, payload) => {\n    console.log(\"%cOn connect\", \"background: yellow\");\n    if (error) {\n      throw error;\n    }\n    const { accounts } = payload.params[0];\n    dispatch(setAccounts(accounts));\n  });\n  \n  connector.on(\"session_update\", (error, payload) => {\n    console.log(\"%cOn session_update\", \"background: yellow\");\n    if (error) {\n      throw error;\n    }\n    const { accounts } = payload.params[0];\n    dispatch(setAccounts(accounts));\n  });\n  \n  connector.on(\"disconnect\", (error, payload) => {\n    console.log(\"%cOn disconnect\", \"background: yellow\");\n    if (error) {\n      throw error;\n    }\n    dispatch(reset());\n  });\n}\n\nexport const setAccountsAtConnection = (dispatch: Dispatch<any>) => (accounts: []) => {\n  dispatch(setAccounts(accounts));\n  dispatch(setConnected(true));\n}\n\nexport const getAlgoAssetData = (assets: IAssetData[]) => {\n  let nativeCurrency = assets && assets.find((asset: IAssetData) => asset && asset.id === 0);\n  if (nativeCurrency === undefined || nativeCurrency == null) {\n    nativeCurrency = {\n      id: 0,\n      amount: BigInt(0),\n      creator: \"\",\n      frozen: false,\n      decimals: 6,\n      name: \"Algo\",\n      unitName: \"Algo\",\n    };\n  }\n  return nativeCurrency;\n}","export default __webpack_public_path__ + \"static/media/logo.4c0b7fbc.svg\";","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, IconButton, Menu, MenuIcon, Popover, Position } from 'evergreen-ui';\nimport { Link } from \"react-router-dom\";\n\nimport { ellipseAddress, formatBigNumWithDecimals } from '../../helpers/utilities';\nimport { killSession, selectConnector, selectAssets, selectAddress, getAccountAssets, selectChain, setFetching, selectFetching, selectWalletType } from '../../features/walletSlice';\nimport { setIsModalOpen } from '../../features/applicationSlice';\nimport { getAlgoAssetData, setAccountsAtConnection, subscribeToEvents } from '../Wallet/utils';\nimport logo from \"../../assets/logo.svg\";\n\nconst SiteHeader: React.FC = () => {\n  const loading = useSelector(selectFetching);\n  const connector = useSelector(selectConnector);\n  const assets = useSelector(selectAssets);\n  const address = useSelector(selectAddress);\n  const chain = useSelector(selectChain);\n  const walletType = useSelector(selectWalletType);\n  const nativeCurrency = getAlgoAssetData(assets);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // Check if connection is already established\n    if (!connector) {\n      return;\n    }\n    if (walletType === \"walletConnect\") {\n      subscribeToEvents(dispatch)(connector);\n      if (!connector.connected) {\n        connector.createSession();\n      }\n      const { accounts } = connector;\n      setAccountsAtConnection(dispatch)(accounts);\n    }\n    if (walletType === \"myAlgo\") {\n      connector.connect().then((accounts: []) => {\n        setAccountsAtConnection(dispatch)(accounts);\n      });\n    }\n    if (walletType === \"algoSigner\") {\n      connector.accounts({ledger: chain})\n        .then((accounts: []) => {\n          setAccountsAtConnection(dispatch)(accounts);\n        });\n    }\n  }, [connector]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    // Check if connection is already established\n    if (connector && address && address.length > 0) {\n      dispatch(getAccountAssets({chain, address}));\n      dispatch(setFetching(true));\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    dispatch(setFetching(false));\n  }, [assets]); // eslint-disable-line react-hooks/exhaustive-deps\n  \n  return (\n    <div className=\"site-layout-background site-header\">\n      <div className=\"site-header-inner\">\n        <div className=\"site-header-left\">\n          <Link className=\"site-logo\" to=\"/\">\n            <img src={logo} alt=\"Subscrypt\"/>\n            <span className=\"site-name\">Subscrypt</span>\n          </Link>\n        </div>\n        <div className=\"site-header-right\">\n          <Popover\n            position={Position.BOTTOM_LEFT}\n            content={\n              <Menu>\n                <Menu.Group>\n                  <Menu.Item>\n                    <Link to=\"/supporter/dashboard\">\n                      Dashboard\n                    </Link>\n                  </Menu.Item>\n                  <Menu.Item>\n                    <Link to=\"/supporter\">\n                      Subscribe to Plan\n                    </Link>\n                  </Menu.Item>\n                </Menu.Group>\n              </Menu>\n            }\n          >\n            <span className=\"menu-trigger\">Supporter</span>\n          </Popover>\n          <Popover\n            position={Position.BOTTOM_LEFT}\n            content={\n              <Menu>\n                <Menu.Group>\n                  <Menu.Item>\n                    <Link to=\"/creator/dashboard\">\n                      Dashboard\n                    </Link>\n                  </Menu.Item>\n                  <Menu.Item>\n                    <Link to=\"/creator\">\n                      Create Plan\n                    </Link>\n                  </Menu.Item>\n                </Menu.Group>\n              </Menu>\n            }\n          >\n            <span className=\"menu-trigger\">Creator</span>\n          </Popover>\n          {!address ?\n            <Button\n              appearance=\"primary\"\n              onClick={() => dispatch(setIsModalOpen(true))}\n              size=\"medium\"\n            >\n              Connect Wallet\n            </Button>\n          : <div className=\"header-address-info\">\n              {loading ? null : <span className=\"wallet-amount\">\n                {formatBigNumWithDecimals(nativeCurrency.amount, nativeCurrency.decimals)} {nativeCurrency.unitName || \"units\"}\n              </span>}\n              <span className=\"header-account\">{ellipseAddress(address)}</span>\n              <Popover\n                position={Position.BOTTOM_RIGHT}\n                content={\n                  <Menu>\n                    <Menu.Group>\n                      <Menu.Item onSelect={() => dispatch(killSession())}>\n                        Disconnect\n                      </Menu.Item>\n                    </Menu.Group>\n                  </Menu>\n                }\n              >\n                <IconButton icon={MenuIcon} marginRight={16} appearance=\"minimal\" className=\"disconnect-button\" />\n              </Popover>\n          </div>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default SiteHeader;","import React from 'react';\n\nconst LoadingIcon: React.FC = () => {\n  return (\n    <div className=\"loading-icon\"><span></span></div>\n  )\n}\n\nexport default LoadingIcon;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectConnected, selectFetching } from '../../features/walletSlice';\nimport LoadingIcon from '../LoadingIcon';\n\nconst Home: React.FC = () => {\n  const connected = useSelector(selectConnected);\n  const loading = useSelector(selectFetching);\n\n  return (\n    <div className=\"site-body\">\n      <h1>Welcome to Subscrypt</h1>\n      <p className=\"desc\">\n        We are a decentralised subscription service for creators and their supporters.\n      </p>\n      { loading ? <LoadingIcon/> : \n        connected ? \n          <div className=\"site-body-inner\">\n            <h2>\n              Choose Your Role\n            </h2>\n            <Link className=\"role-button\" to=\"/creator\">\n              I am a Creator\n            </Link>\n            <Link className=\"role-button\" to=\"/supporter\">\n              I am a Supporter\n            </Link>\n        </div>\n        : <div>\n            <p className=\"desc\">\n              Creators can customise their plans on Subscrypt. Supporters can use their Algorand wallet to pay for the subscription and our smart contracts will handle the rest.\n            </p>\n            <p className=\"desc\">\n              A decentralised subscription service offers creators freedom on how and where their paywalled content will be hosted. Creators can integrate their supporters' Subscrypt status to their own platform for providing perks.\n            </p>\n            <p className=\"desc\">\n              Connect your wallet to try now!\n            </p>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default Home;","export default __webpack_public_path__ + \"static/media/algorandwallet.37675b59.svg\";","export default __webpack_public_path__ + \"static/media/myalgo.7390ec09.svg\";","export default __webpack_public_path__ + \"static/media/algosigner.2ec35000.svg\";","import { Button, TextareaField, TextInputField } from 'evergreen-ui';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { selectAddress, selectConnected, selectWalletType, selectConnector, selectFetching, setFetching } from '../../features/walletSlice';\nimport { createSubscriptionPlan, setupSubscription } from '../../algorand/contractHelpers';\nimport { setIsNotificationOpen, setNotificationContent, setNotificationTitle } from '../../features/applicationSlice';\nimport LoadingIcon from '../LoadingIcon';\n\nconst CreatorHome: React.FC = () => {\n  const connected = useSelector(selectConnected);\n  const loading = useSelector(selectFetching);\n  const address = useSelector(selectAddress);\n  const walletType = useSelector(selectWalletType);\n  const connector = useSelector(selectConnector);\n  const [creatorName, setCreatorName] = useState(\"\");\n  const [planName, setPlanName] = useState(\"\");\n  const [planDesc, setPlanDesc] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [appId, setAppId] = useState(0);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const createPlan = async() => {\n    if (!creatorName || !planName || !planDesc || !price || !address || !walletType || !connector) {\n      return;\n    }\n    dispatch(setFetching(true));\n    const _appId = await createSubscriptionPlan(\n                                creatorName,\n                                planName,\n                                planDesc,\n                                Number(price),\n                                address,\n                                walletType,\n                                connector);\n\n    await setupSubscription(_appId, address, walletType, connector)\n        .then(result => {\n          setAppId(_appId);\n          dispatch(setIsNotificationOpen(true));\n          dispatch(setNotificationTitle(\"Subscription Setup Success\"))\n          dispatch(setNotificationContent(\"Confirmed at round \"+result[\"confirmed-round\"]+\". Your subscription plan's app ID is \"+_appId+\".\"))\n          dispatch(setFetching(false));\n          navigate(\"/creator/dashboard\");\n        })\n        .catch(error => {\n          dispatch(setIsNotificationOpen(true));\n          dispatch(setNotificationTitle(\"Subscription Setup Error\"))\n          dispatch(setNotificationContent(error))\n          dispatch(setFetching(false));\n        });\n  }\n\n  return (\n    <div className=\"site-body\">\n      <div className=\"site-body-inner form-wrapper\">\n        <h2>\n          Create Subscription Plan\n        </h2>\n        { loading ? <LoadingIcon/> : \n          connected ? \n            appId === 0 ?\n            <>\n              <TextInputField\n                label=\"Creator\"\n                description=\"Enter a name for your supporters to identify you.\"\n                onChange={(event: any) => setCreatorName(event.target.value)}\n                value={creatorName}\n              />\n              <TextInputField\n                label=\"Plan\"\n                description=\"Enter your subscription plan name.\"\n                onChange={(event: any) => setPlanName(event.target.value)}\n                value={planName}\n              />\n              <TextareaField\n                label=\"Description\"\n                description=\"Let your supporters know what you are offering them.\"\n                onChange={(event: any) => setPlanDesc(event.target.value)}\n                value={planDesc}\n              />\n              <div className=\"form-row\">\n                <TextInputField\n                  label=\"Monthly Price\"\n                  description=\"This is how much subscribers will pay every month.\"\n                  onChange={(event: any) => setPrice(event.target.value)}\n                  value={price}\n                />\n                <span>Algo</span>\n              </div>\n              <Button appearance=\"primary\" onClick={createPlan}>Create Plan</Button>\n            </>\n            : <p className=\"reminder-text\">\n              Your subscription plan's app ID is {appId}\n            </p>\n          : <p className=\"reminder-text\">Please connect to your wallet first.</p>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default CreatorHome;","import { Button, Table } from 'evergreen-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAddress, selectConnected, selectWalletType, selectConnector, selectFetching } from '../../features/walletSlice';\nimport { closeSubscription, getUserCreatedPlans } from '../../algorand/contractHelpers';\nimport { setIsNotificationOpen, setNotificationContent, setNotificationTitle } from '../../features/applicationSlice';\nimport LoadingIcon from '../LoadingIcon';\nimport algosdk from 'algosdk';\n\nconst CreatorDashboard: React.FC = () => {\n  const connected = useSelector(selectConnected);\n  const loading = useSelector(selectFetching);\n  const address = useSelector(selectAddress);\n  const walletType = useSelector(selectWalletType);\n  const connector = useSelector(selectConnector);\n  const [plans, setPlans] = useState([]);\n\n  const dispatch = useDispatch();\n\n  const onDeleteError = (error: any) => {\n    dispatch(setIsNotificationOpen(true));\n    dispatch(setNotificationTitle(\"Delete Plan Error\"))\n    dispatch(setNotificationContent(\"Please try again.\"))\n  }\n\n  const deletePlan = async(appId: string) => {\n    if (!address || !walletType || !connector) {\n      return;\n    }\n\n    await closeSubscription(parseInt(appId), address, walletType, connector)\n        .then(result => {\n          try {\n            console.log(\"result: \", result)\n            dispatch(setIsNotificationOpen(true));\n            dispatch(setNotificationTitle(\"Deleted Plan Successfully\"))\n            dispatch(setNotificationContent(\"Confirmed at round \"+result[\"confirmed-round\"]))\n          }\n          catch(error) {\n            onDeleteError(error);\n          }\n        })\n        .catch(error => {\n          onDeleteError(error);\n        });\n  }\n\n  useEffect(() => {\n    if (address.length > 0 && walletType && connector) {\n      console.log(\"address: \",address)\n      getUserCreatedPlans(address)\n        .then(result => {\n          setPlans(result);\n        });\n    }\n  }, [address, walletType, connector]);\n\n  return (\n    <>\n      <div className=\"site-body dashboard-view\">\n        <h2>\n          Creator Dashboard\n        </h2>\n        { loading ? <LoadingIcon/> : \n          connected ? \n          <Table>\n            <Table.Head>\n              <Table.TextHeaderCell>Plan ID</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Plan</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Details</Table.TextHeaderCell>\n              {/* <Table.TextHeaderCell>Subscribers</Table.TextHeaderCell> */}\n              <Table.TextHeaderCell>Monthly Price</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Actions</Table.TextHeaderCell>\n            </Table.Head>\n            <Table.VirtualBody height={240}>\n              {plans.map((plan: any) => (\n                <Table.Row key={plan.appId}>\n                  <Table.TextCell>{plan.appId}</Table.TextCell>\n                  <Table.TextCell>{plan.globalState.plan_name}</Table.TextCell>\n                  <Table.TextCell>{plan.globalState.plan_desc}</Table.TextCell>\n                  {/* <Table.TextCell isNumber>{plan.globalState.numOfSubscribers || 0}</Table.TextCell> */}\n                  <Table.TextCell isNumber>{algosdk.microalgosToAlgos(plan.globalState.plan_monthly_price.i)} Algo</Table.TextCell>\n                  <Table.TextCell>\n                    <Button size=\"small\" onClick={() => deletePlan(plan.appId)}>Delete</Button>\n                  </Table.TextCell>\n                </Table.Row>\n              ))}\n            </Table.VirtualBody>\n          </Table>\n          : <p className=\"reminder-text\">Please connect to your wallet first.</p>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default CreatorDashboard;","import { Button, TextInputField } from 'evergreen-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAddress, selectConnected, selectWalletType, selectConnector, selectFetching, setFetching } from '../../features/walletSlice';\nimport { getAppGlobalState, StateToObj, subscribePlan } from '../../algorand/contractHelpers';\nimport { setIsNotificationOpen, setNotificationContent, setNotificationTitle } from '../../features/applicationSlice';\nimport LoadingIcon from '../LoadingIcon';\nimport algosdk from 'algosdk';\nimport { useNavigate } from 'react-router-dom';\n\nconst SubscribeView: React.FC = () => {\n  const connected = useSelector(selectConnected);\n  const loading = useSelector(selectFetching);\n  const address = useSelector(selectAddress);\n  const walletType = useSelector(selectWalletType);\n  const connector = useSelector(selectConnector);\n  const [appId, setAppId] = useState(\"\");\n  const [months, setMonths] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [actualPayAmount, setActualPayAmount] = useState(0);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const subscribe = async() => {\n    if (!appId || !months) {\n      return;\n    }\n    const _appId = parseInt(appId);\n    dispatch(setFetching(true));\n    await subscribePlan(\n            _appId,\n            actualPayAmount,\n            address,\n            walletType,\n            connector\n        )\n        .then(result => {\n          dispatch(setIsNotificationOpen(true));\n          dispatch(setNotificationTitle(\"Subscription Success\"));\n          dispatch(setNotificationContent(\"Confirmed at round \"+result[\"confirmed-round\"]));\n          dispatch(setFetching(false));\n          navigate(\"/supporter/dashboard\");\n        })\n        .catch(error => {\n          dispatch(setIsNotificationOpen(true));\n          dispatch(setNotificationTitle(\"Subscription Error\"));\n          dispatch(setNotificationContent(\"Please try again.\"));\n          dispatch(setFetching(false));\n        });\n  }\n\n  useEffect(() => {\n    if (appId.length > 0) {\n      getAppGlobalState(parseInt(appId))\n        .then(result => {\n          const _amount = algosdk.microalgosToAlgos(StateToObj(result)[\"plan_monthly_price\"].i);\n          setAmount(_amount);\n        });\n    } else {\n      setAmount(0);\n    }\n  }, [appId]);\n\n  useEffect(() => {\n    if (parseInt(months) > 0 && amount > 0) {\n      // 0.001 tx fee for opt-in and 0.001 tx fee for payment\n      const _actual = parseInt(months) * amount;\n      setActualPayAmount(_actual);\n    }\n  }, [months, amount]);\n\n  return (\n    <div className=\"site-body\">\n      <div className=\"site-body-inner form-wrapper\">\n        <h2>\n          Subscribe to Plan\n        </h2>\n        { loading ? <LoadingIcon/> : \n          connected ? \n          <>\n            <TextInputField\n              label=\"App ID\"\n              description=\"Enter the app ID for the plan.\"\n              onChange={(event: any) => setAppId(event.target.value)}\n              value={appId}\n            />\n            <TextInputField\n              label=\"Number of Months\"\n              description=\"Enter the number of months you'd like to be subscribed for.\"\n              onChange={(event: any) => setMonths(event.target.value)}\n              value={months}\n            />\n            {\n              amount ? \n              <div className=\"form-row\">\n                <span className=\"price\">Monthly Price: {amount || \"\"} Algo</span>\n              </div>\n              : null\n            }\n            {\n              months && amount ?\n              <div className=\"form-row\">\n                <span className=\"price\">Total: {actualPayAmount} Algo</span>\n              </div>\n              : null\n            }\n            <Button appearance=\"primary\" onClick={subscribe}>Subscribe</Button>\n          </>\n          : <p className=\"reminder-text\">Please connect to your wallet first.</p>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default SubscribeView;","import { Button, Table } from 'evergreen-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAddress, selectConnected, selectWalletType, selectConnector, selectFetching } from '../../features/walletSlice';\nimport { getSubscriptionPlan, getUserSubscribedPlans } from '../../algorand/contractHelpers';\nimport LoadingIcon from '../LoadingIcon';\nimport algosdk from 'algosdk';\nimport { Subscription } from '../../algorand/subscription';\n\nconst SupporterDashboard: React.FC = () => {\n  const connected = useSelector(selectConnected);\n  const loading = useSelector(selectFetching);\n  const address = useSelector(selectAddress);\n  const walletType = useSelector(selectWalletType);\n  const connector = useSelector(selectConnector);\n  const [plans, setPlans] = useState([]);\n\n  useEffect(() => {\n    if (!address || !walletType || !connector) {\n      return;\n    }\n  }, [address, walletType, connector]);\n\n  useEffect(() => {\n    if (address.length > 0) {\n      getUserSubscribedPlans(address)\n      .then(result => {\n          const apps: Promise<Subscription>[] = result.map((app: any, index: number) => getSubscriptionPlan(app.id));\n          Promise.all(apps).then(appDetails => {\n            console.log(\"RESULTS: \", appDetails)\n            result.forEach(async(app: any, index: number) => {\n              result[index][\"global-state\"] = appDetails.find(_app => app.id === _app.id);\n            });\n            setPlans(result);\n          })\n        });\n    }\n  }, [address]);\n\n\n  return (\n    <>\n      <div className=\"site-body dashboard-view\">\n        <h2>\n          Supporter Dashboard\n        </h2>\n        { loading ? <LoadingIcon/> : \n          connected ? \n          <Table>\n            <Table.Head>\n              <Table.TextHeaderCell>Plan ID</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Creator</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Plan</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Details</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Subscription Length</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Total Paid</Table.TextHeaderCell>\n              <Table.TextHeaderCell>Monthly Price</Table.TextHeaderCell>\n              {/* <Table.TextHeaderCell>Your Subscription Start Date</Table.TextHeaderCell> */}\n              <Table.TextHeaderCell>Actions</Table.TextHeaderCell>\n            </Table.Head>\n            <Table.VirtualBody height={240}>\n              {plans.map((plan: any) => (\n                <Table.Row key={plan.id}>\n                  <Table.TextCell>{plan.id}</Table.TextCell>\n                  <Table.TextCell>{plan[\"global-state\"].creator_name}</Table.TextCell>\n                  <Table.TextCell>{plan[\"global-state\"].plan_name}</Table.TextCell>\n                  <Table.TextCell>{plan[\"global-state\"].plan_desc}</Table.TextCell>\n                  <Table.TextCell>{plan[\"local-state\"].months_subscribed.i} months</Table.TextCell>\n                  <Table.TextCell isNumber>{algosdk.microalgosToAlgos(plan[\"local-state\"].paid.i)} Algo</Table.TextCell>\n                  <Table.TextCell isNumber>{algosdk.microalgosToAlgos(plan[\"global-state\"].plan_monthly_price)} Algo</Table.TextCell>\n                  {/* <Table.TextCell>{new Date(plan[\"local-state\"].subscription_start_date.i).toString()}</Table.TextCell> */}\n                  <Table.TextCell>\n                    <Button size=\"small\">Unsubscribe</Button>\n                  </Table.TextCell>\n                </Table.Row>\n              ))}\n            </Table.VirtualBody>\n          </Table>\n          : <p className=\"reminder-text\">Please connect to your wallet first.</p>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default SupporterDashboard;","import React, { useEffect } from 'react';\nimport {\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport { Button, CornerDialog, Dialog } from 'evergreen-ui';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.css';\nimport SiteHeader from './components/SiteHeader';\nimport { selectConnected, selectWalletType, setWalletType, walletInit } from './features/walletSlice';\nimport { selectIsModalOpen, selectIsNotificationOpen, selectNotificationContent, selectNotificationTitle, setIsModalOpen, setIsNotificationOpen } from './features/applicationSlice';\nimport Home from './components/SiteBody/home';\nimport algowallet from \"./assets/algorandwallet.svg\";\nimport myalgo from \"./assets/myalgo.svg\";\nimport algosigner from \"./assets/algosigner.svg\";\nimport CreatePlan from './components/Creator/createPlan';\nimport CreatorDashboard from './components/Creator/dashboard';\nimport SubscribeView from './components/Supporter/subscribe';\nimport SupporterDashboard from './components/Supporter/dashboard';\n\nconst App: React.FC = () => {\n  const isModalOpen = useSelector(selectIsModalOpen);\n  const notificationTitle = useSelector(selectNotificationTitle);\n  const notificationContent = useSelector(selectNotificationContent);\n  const isNotificationOpen = useSelector(selectIsNotificationOpen);\n  const walletType = useSelector(selectWalletType);\n  const connected = useSelector(selectConnected);\n  const dispatch = useDispatch();\n  const setWalletAndConnect = (walletName: string) =>\n      dispatch(setWalletType(walletName));\n\n  useEffect(() => {\n    // auto-detect is user has connected their wallet to the app\n    if (window.localStorage.getItem(\"walletconnect\") != null) {\n      dispatch(setWalletType(\"walletConnect\"));\n    } else if (typeof (window as any).AlgoSigner !== 'undefined') {\n      dispatch(setWalletType(\"algoSigner\"));\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (walletType.length > 0) {\n      dispatch(walletInit());\n    }\n  }, [walletType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (connected) {\n      dispatch(setIsModalOpen(false));\n    }\n  }, [connected]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"site-layout\">\n      <SiteHeader/>\n      <Routes>\n        <Route index element={<Home/>} />\n        <Route path=\"creator\" element={<CreatePlan/>}/>\n        <Route path=\"creator/dashboard\" element={<CreatorDashboard/>}/>\n        <Route path=\"supporter\" element={<SubscribeView/>}/>\n        <Route path=\"supporter/dashboard\" element={<SupporterDashboard/>}/>\n      </Routes>\n      <div className=\"footer\">Subscrypt ©2021 Created with 💖</div>\n      <Dialog\n        isShown={isModalOpen}\n        title=\"Connect to a wallet\"\n        hasFooter={false}\n        onCloseComplete={() => dispatch(setIsModalOpen(false))}\n      >\n        <Button className=\"wallet-button\" appearance=\"minimal\" onClick={() => dispatch(setWalletAndConnect(\"walletConnect\"))}>\n          <img className=\"wallet-icon\" src={algowallet} alt=\"Algorand wallet\"/>\n          <span>Algorand Wallet</span>\n        </Button>\n        <Button className=\"wallet-button\" appearance=\"minimal\" onClick={() => dispatch(setWalletAndConnect(\"myAlgo\"))}>\n          <img className=\"wallet-icon\" src={myalgo} alt=\"MyAlgo Wallet\" />\n          <span>My Algo Wallet</span>\n        </Button>\n        <Button className=\"wallet-button\" appearance=\"minimal\" onClick={() => dispatch(setWalletAndConnect(\"algoSigner\"))}>\n          <img className=\"wallet-icon\" src={algosigner} alt=\"AlgoSigner\" />\n          <span>AlgoSigner</span>\n        </Button>\n      </Dialog>\n      <CornerDialog\n        title={notificationTitle}\n        isShown={isNotificationOpen}\n        onCloseComplete={() => dispatch(setIsNotificationOpen(false))}\n        hasFooter={false}\n      >\n        {notificationContent}\n      </CornerDialog>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport walletReducer from '../features/walletSlice';\nimport applicationReducer from '../features/applicationSlice';\n\nconst store = configureStore({\n  reducer: {\n    wallet: walletReducer,\n    application: applicationReducer,\n  },\n  preloadedState: {\n  },\n  middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware({\n      serializableCheck: false,\n    })\n});\n\nexport default store;","import { defaultTheme } from \"evergreen-ui\";\n\nconst button = {\n  baseStyle: {\n    ...(defaultTheme as any).components.Button,\n    fontFamily: \"var(--font-family)\",\n    fontSize: \"var(--font-size-s)\",\n    padding: \"var(--space-s)\",\n    borderRadius: 4,\n  },\n  appearances: {\n    primary: {\n      color: \"white\",\n      backgroundColor: \"var(--blue)\",\n      _hover: {\n        backgroundColor: 'var(--blue-light)',\n      },\n    },\n    minimal: {\n      color: \"black\",\n      backgroundColor: \"transparent\",\n      border: \"2px solid #dcdcdc\",\n      _hover: {\n        border: \"2px solid #999\"\n      },\n    },\n  },\n  sizes: {\n    small: {\n      height: \"1.5rem\",\n      lineHeight: \"1\",\n      fontSize: \"var(--font-size-xs)\",\n    },\n    large: {\n      height: \"3rem\",\n      fontSize: \"var(--font-size-l)\",\n    }\n  }\n}\n\nexport default button;","import { defaultTheme } from \"evergreen-ui\";\n\nconst input = {\n  baseStyle: {\n    ...(defaultTheme as any).components.Input,\n    fontSize: \"var(--font-size-m)\",\n    padding: \"var(--space-s)\",\n    border: \"1px solid var(--grey-lighter)\",\n    borderRadius: \"var(--border-radius)\"\n  },\n}\n\nexport default input;","import { defaultTheme } from \"evergreen-ui\";\n\nconst table = {\n  baseStyle: {\n    ...(defaultTheme as any).components.Table,\n    fontSize: \"var(--font-size-m)\",\n    padding: \"var(--space-s)\",\n    border: \"none\",\n    borderRadius: \"var(--border-radius)\"\n  },\n}\n\nexport default table;","import { defaultTheme } from \"evergreen-ui\";\nimport button from \"./button\";\nimport input from \"./input\";\nimport table from \"./table\";\n\nconst theme = {\n    ...defaultTheme,\n    fontFamilies: {\n      display: \"var(--font-family-display)\",\n      ui: \"var(--font-family)\",\n      mono: \"var(--font-family-mono)\",\n    },\n    components: {\n      ...(defaultTheme as any).components,\n      Button: button,\n      Input: input,\n      Table: table,\n    },\n};\n\nexport default theme;","import React from 'react';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { ThemeProvider } from 'evergreen-ui';\nimport theme from './theme';\n\nconst renderApp = () => ReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider value={theme}>\n        <Router>\n          <App/>\n        </Router>\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (process.env.NODE_ENV !== 'production' && (module as any).hot) {\n  (module as any).hot.accept('./App', renderApp);\n}\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Config } from \"./config\";\n\nconst testnet_config: Config = {\n  \"explorer\":\"algoexplorer.io\",\n  \"algod\":{\n    \"host\": \"https://testnet.algoexplorerapi.io\",\n    \"port\":0,\n    \"token\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  },\n  \"indexer\":{\n    \"host\": \"https://testnet.algoexplorerapi.io/idx2\",\n    \"port\": 0,\n    \"token\":\"\"\n  },\n  \"network\":\"TestNet\"\n}\n\nexport default testnet_config;","import Configuration from \"./config.testnet\";\n\nexport interface ApiConf {\n    host: string\n    port: number\n    token: string\n}\n\nexport interface Config {\n    explorer: string\n    algod:  ApiConf \n    indexer:  ApiConf\n    network: string\n}\n\nexport default Configuration","import algosdk, {Transaction} from \"algosdk\"\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\n\nexport interface SignedTxn {\n    txID: string\n    blob: Uint8Array\n}\n\nexport async function sign(txns: Transaction[], walletType: string, connector: any): Promise<SignedTxn[]> {\n\n    const txnsToSign = txns.map((txn) => {\n        const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n\n        return {txn: encodedTxn};\n    })\n\n    const request = formatJsonRpcRequest(\"algo_signTxn\", [txnsToSign]);\n    \n    let result: string[] = [];\n    if (walletType === \"walletConnect\") {\n      result = await connector.sendCustomRequest(request);\n      return result.map((element, idx) => {\n        console.log(\"Element: \", element)\n        return element ? {\n            txID: txns[idx].txID(), \n            blob: new Uint8Array(Buffer.from(element, \"base64\"))\n          } : {\n            txID:txns[idx].txID(), \n            blob:new Uint8Array()\n          };\n      });\n    } else if (walletType === \"myAlgo\") {\n      result = await connector.signTransaction(txnsToSign.map(txn => txn.txn));\n    } else if (walletType === \"algoSigner\") {\n      result = await connector.signTxn([txnsToSign]);\n    }\n    console.log(\"RESULT: \",result);\n\n    return result.map((element, idx) => {\n      console.log(\"Element: \", element)\n      return element ? {\n          txID: txns[idx].txID(), \n          blob: new Uint8Array(Buffer.from((element as any).blob, \"base64\"))\n        } : {\n          txID:txns[idx].txID(), \n          blob:new Uint8Array()\n        };\n    });\n}"],"sourceRoot":""}